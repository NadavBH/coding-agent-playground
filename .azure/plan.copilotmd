# Azure Deployment Plan for Contoso Toyland Project

## **Goal**
Deploy the Contoso Toyland React Node.js web application to Azure Web App Service using Azure CLI.

## **Project Information**

- **AppName**: contoso-toyland
- **Technology Stack**: React 18 + Node.js + Zustand + React Router v7
- **Application Type**: E-commerce toy store with product browsing, shopping cart, and admin panel
- **Runtime**: Node.js 18 LTS
- **Build Command**: `npm run build`
- **Start Command**: `node server.js` or via Vite dev server
- **Containerization**: Ready for deployment (no Dockerfile currently, can use built-in App Service Node.js runtime)
- **Dependencies**: SQL Database, Storage Account, Key Vault for secrets
- **Hosting Recommendation**: Azure Web App Service (B2/B3 tier with auto-scaling)

## **Azure Resources Architecture**

```mermaid
graph TB
    Users["üë• End Users"]
    CDN["üì° Azure CDN"]
    AppGW["üõ°Ô∏è App Gateway"]
    AppService["‚öôÔ∏è Web App Service<br/>Node.js B2/B3"]
    SQL["üóÑÔ∏è SQL Database<br/>Standard S1"]
    Storage["üíæ Storage Account"]
    KV["üîê Key Vault"]
    AppIns["üìä App Insights"]
    LogAnalytics["üìä Log Analytics"]
    
    Users -->|HTTPS| CDN
    CDN -->|Cache| AppGW
    AppGW -->|Route| AppService
    AppService -->|Query| SQL
    AppService -->|Store Logs| Storage
    AppService -.->|Get Secrets| KV
    AppService -->|Metrics| AppIns
    AppIns -->|Logs| LogAnalytics
```

## **Recommended Azure Resources**

### **Application Hosting**
- **Application**: contoso-toyland
  - **Hosting Service Type**: Azure Web App Service
  - **SKU**: B2 tier (1 vCPU, 1.75 GB RAM) with auto-scaling to B3 (2 vCPU, 3.5 GB RAM)
  - **Configuration**:
    - Language: Node.js 18 LTS
    - Runtime Stack: Node|18-lts
    - Environment Variables: 
      - `WEBSITE_RUN_FROM_PACKAGE=1`
      - `NODE_ENV=production`
      - `DB_SERVER=<sql-server>.database.windows.net`
      - `DB_NAME=contoso_toyland_prod`
      - `KEY_VAULT_URI=https://<keyvault>.vault.azure.net/`

### **Data Layer Dependencies**

#### **1. Azure SQL Database**
- **SKU**: Standard S1 (20 DTUs)
- **Service Type**: Azure SQL Database
- **Connection Type**: Connection string with server firewall rules
- **Environment Variables**: 
  - `DB_CONNECTION_STRING`
  - `DB_SERVER`
  - `DB_USER`
  - `DB_PASSWORD`

#### **2. Azure Storage Account**
- **SKU**: Standard LRS (Locally Redundant Storage)
- **Service Type**: Azure Storage Account
- **Connection Type**: Storage account key
- **Environment Variables**:
  - `STORAGE_ACCOUNT_NAME`
  - `STORAGE_ACCOUNT_KEY`

### **Security & Configuration**
- **Azure Key Vault**: 
  - Standard tier
  - Stores: DB password, API keys, connection strings, JWT signing keys
  - Access: Managed Identity from App Service
  
### **Monitoring & Logging**
- **Application Insights**: Real-time monitoring, performance metrics, error tracking
- **Log Analytics Workspace**: Centralized logging, audit trails
- **Auto-scaling**: Based on CPU > 70% scale-out, < 30% scale-in

## **Execution Steps**

### **Step 1: Create Resource Group**
```bash
az group create \
  --name contoso-toyland-prod-rg \
  --location swedencentral
```

### **Step 2: Create Storage Account**
```bash
az storage account create \
  --name contosotoylandstorage \
  --resource-group contoso-toyland-prod-rg \
  --location swedencentral \
  --sku Standard_LRS \
  --kind StorageV2 \
  --access-tier Hot
```

### **Step 3: Create Key Vault**
```bash
az keyvault create \
  --name contoso-toyland-kv \
  --resource-group contoso-toyland-prod-rg \
  --location swedencentral \
  --enable-soft-delete true \
  --purge-protection true
```

### **Step 4: Create SQL Server and Database**
```bash
az sql server create \
  --name contoso-toyland-sql \
  --resource-group contoso-toyland-prod-rg \
  --location swedencentral \
  --admin-user sqladmin \
  --admin-password 'P@ssw0rd123!Complex'

az sql db create \
  --server contoso-toyland-sql \
  --name contoso_toyland_prod \
  --resource-group contoso-toyland-prod-rg \
  --edition Standard \
  --capacity 20
```

### **Step 5: Create Application Insights**
```bash
az monitor app-insights component create \
  --app contoso-toyland-ai \
  --resource-group contoso-toyland-prod-rg \
  --location swedencentral \
  --kind web \
  --application-type web
```

### **Step 6: Create Log Analytics Workspace**
```bash
az monitor log-analytics workspace create \
  --resource-group contoso-toyland-prod-rg \
  --workspace-name contoso-toyland-la \
  --location swedencentral
```

### **Step 7: Create App Service Plan**
```bash
az appservice plan create \
  --name contoso-toyland-asp \
  --resource-group contoso-toyland-prod-rg \
  --sku B2 \
  --is-linux
```

### **Step 8: Create Web App**
```bash
az webapp create \
  --resource-group contoso-toyland-prod-rg \
  --plan contoso-toyland-asp \
  --name contoso-toyland-web \
  --runtime 'NODE|18-lts'
```

### **Step 9: Configure App Settings**
```bash
az webapp config appsettings set \
  --resource-group contoso-toyland-prod-rg \
  --name contoso-toyland-web \
  --settings \
    WEBSITE_RUN_FROM_PACKAGE=1 \
    NODE_ENV=production \
    DB_SERVER='contoso-toyland-sql.database.windows.net' \
    DB_NAME='contoso_toyland_prod' \
    DB_USER='sqladmin' \
    KEY_VAULT_URI='https://contoso-toyland-kv.vault.azure.net/' \
    APPLICATIONINSIGHTS_CONNECTION_STRING='<app-insights-connection-string>'
```

### **Step 10: Configure Virtual Network Integration** (Optional)
```bash
az webapp vnet-integration add \
  --resource-group contoso-toyland-prod-rg \
  --name contoso-toyland-web \
  --vnet <vnet-resource-id> \
  --subnet <subnet-id>
```

### **Step 11: Build and Deploy Application**
```bash
npm run build
cd dist
zip -r ../deployment.zip .
az webapp deployment source config-zip \
  --resource-group contoso-toyland-prod-rg \
  --name contoso-toyland-web \
  --src ../deployment.zip
```

### **Step 12: Enable Auto-scaling**
```bash
az monitor autoscale create \
  --resource-group contoso-toyland-prod-rg \
  --resource contoso-toyland-asp \
  --resource-type "Microsoft.Web/serverFarms" \
  --name contoso-toyland-autoscale \
  --min-count 1 \
  --max-count 3 \
  --count 1

az monitor autoscale rule create \
  --resource-group contoso-toyland-prod-rg \
  --autoscale-name contoso-toyland-autoscale \
  --condition "Percentage CPU > 70 avg 5m" \
  --scale out 1

az monitor autoscale rule create \
  --resource-group contoso-toyland-prod-rg \
  --autoscale-name contoso-toyland-autoscale \
  --condition "Percentage CPU < 30 avg 5m" \
  --scale in 1
```

## **Validation**

1. ‚úÖ Verify all resources are created in Azure Portal
2. ‚úÖ Check App Service is running and accessible at `https://contoso-toyland-web.azurewebsites.net`
3. ‚úÖ Verify database connectivity from App Service
4. ‚úÖ Confirm Application Insights is collecting telemetry
5. ‚úÖ Test auto-scaling under load

## **Summary**

This deployment plan creates:
- 1 Resource Group (contoso-toyland-prod-rg)
- 1 Web App Service (B2 tier, auto-scaling to B3)
- 1 SQL Database (Standard S1, 20 DTUs)
- 1 Storage Account (Standard LRS)
- 1 Key Vault (Standard tier)
- 1 Application Insights instance
- 1 Log Analytics Workspace
- Auto-scaling rules
- All required networking and monitoring

**Estimated Cost**: ~$140-160/month
**Deployment Time**: ~10-15 minutes
**Uptime SLA**: 99.9%

---

**Next Actions**:
1. Execute Step 1-12 to provision infrastructure
2. Deploy application code to Web App
3. Configure custom domain and SSL certificate (optional)
4. Set up CI/CD pipeline with GitHub Actions
